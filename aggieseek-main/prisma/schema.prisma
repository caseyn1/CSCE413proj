generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                   String                @id @default(uuid())
  name                 String
  email                String?               @unique
  emailVerified        DateTime?             @map("email_verified")
  image                String?
  createdAt            DateTime              @default(now()) @map("created_at")
  updatedAt            DateTime              @updatedAt @map("updated_at")
  discordId            String?               @unique @map("discord_id")
  roleId               Int                   @default(0) @map("role")
  accounts             Account[]
  discordWebhooks      Webhook[]
  feedback             Feedback[]
  notificationSettings NotificationSettings?
  profileSettings      ProfileSettings?
  sessions             Session[]
  trackedSections      TrackedSection[]
  role                 Role                  @relation("users_roleTorole", fields: [roleId], references: [roleId], onDelete: NoAction, onUpdate: NoAction)

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String?
  provider          String
  providerAccountId String   @map("provider_account_id")
  token_type        String?
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  scope             String?
  id_token          String?
  createdAt         DateTime @default(now()) @map("created_at")
  updatedAt         DateTime @updatedAt @map("updated_at")
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @unique @map("session_token")
  accessToken  String?  @map("access_token")
  expires      DateTime
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")
  user         User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
  @@map("vertification_requests")
}

model TrackedSection {
  userId     String   @map("user_id")
  crn        String   @db.VarChar(5)
  createdAt  DateTime @default(now()) @map("created_at")
  term       String   @db.VarChar(10)
  smsEnabled Boolean  @default(false) @map("sms_enabled")
  section    Section  @relation(fields: [term, crn], references: [term, crn], onDelete: Cascade, onUpdate: NoAction)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, term, crn])
  @@map("tracked_sections")
}

model Webhook {
  userId     String @map("user_id")
  webhookUrl String @map("webhook_url")
  users      User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([userId, webhookUrl])
  @@map("discord_webhooks")
}

model Major {
  majorId         Int               @id @default(autoincrement()) @map("major_id")
  name            String            @unique @db.VarChar(100)
  profileSettings ProfileSettings[]

  @@map("majors")
}

model NotificationSettings {
  userId           String  @id @map("user_id")
  email            String?
  phoneNumber      String? @map("phone_number")
  instructorChange Boolean @default(true) @map("instructor_change")
  sectionClose     Boolean @default(true) @map("section_close")
  sectionOpen      Boolean @default(true) @map("section_open")
  discordEnabled   Boolean @default(true) @map("discord_enabled")
  emailEnabled     Boolean @default(false) @map("email_enabled")
  globalEnabled    Boolean @default(true) @map("global_enabled")
  smsEnabled       Boolean @default(false) @map("sms_enabled")
  user             User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("notification_settings")
}

model ProfileSettings {
  userId   String  @id @map("user_id")
  username String? @db.VarChar(20)
  class    Class?
  majorId  Int?    @map("major_id")
  major    Major?  @relation(fields: [majorId], references: [majorId], onUpdate: NoAction)
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("profile_settings")
}

model Feedback {
  feedbackId Int           @id @default(autoincrement()) @map("feedback_id")
  userId     String        @map("user_id")
  title      String        @db.VarChar(100)
  priority   PriorityLevel
  createdAt  DateTime?     @default(now()) @map("created_at") @db.Timestamp(6)
  body       String        @db.VarChar(100)
  users      User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@map("feedback")
}

/// This table is a partition table and requires additional setup for migrations. Visit https://pris.ly/d/partition-tables for more info.
/// The underlying table does not contain a valid unique identifier and can therefore currently not be handled by Prisma Client.
model Section {
  term            String           @db.VarChar(10)
  crn             String           @db.VarChar(5)
  title           String           @db.VarChar(100)
  subject         String           @db.VarChar(10)
  course          String           @db.VarChar(10)
  section         String           @db.VarChar(3)
  creditHours     Decimal          @map("credit_hours") @db.Decimal
  subjectDesc     String           @map("subject_desc")
  instructorJson  Json?            @map("instructor_json")
  meetingsJson    Json?            @map("meetings_json")
  attributes      String?          @db.VarChar(500)
  instructionType String?          @map("instruction_type") @db.VarChar(50)
  scheduleOpen    String           @map("schedule_type") @db.VarChar(10)
  session         String           @db.VarChar(50)
  site            String?          @db.VarChar(50)
  isSectionOpen   Boolean          @map("section_open")
  updatedAt       DateTime         @default(now()) @map("updated_at") @db.Timestamp(6)
  trackedSections TrackedSection[]

  @@id([term, crn])
  @@index([term, crn], map: "idx_term_crn")
  @@map("section")
}

model Instructor {
  instructorId String   @id @map("instructor_id") @db.VarChar(20)
  name         String?  @db.VarChar(200)
  hasCv        Boolean? @map("has_cv")

  @@map("instructor")
}

model Role {
  roleId                 Int    @id @map("role_id")
  name                   String @db.VarChar(20)
  smsMaximum             Int    @map("sms_maximum")
  sectionsMaximum        Int    @map("sections_maximum")
  notificationDelay      Int    @map("notification_delay")
  users_users_roleTorole User[] @relation("users_roleTorole")

  @@map("role")
}

model SmsLimits {
  role    Int  @id(map: "sms_limits_pk")
  maximum Int?

  @@map("sms_limits")
}

enum Class {
  Freshman
  Sophomore
  Junior
  Senior
  Other

  @@map("class")
}

enum PriorityLevel {
  Low
  Medium
  High

  @@map("priority_level")
}
